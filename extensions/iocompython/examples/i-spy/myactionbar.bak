from kivy.app import App

from kivy.uix.actionbar import ActionBar, ActionView, ActionPrevious, ActionOverflow, ActionGroup, ActionButton
# , ActionSeparator, ActionCheck, ActionItem, ActionLabel

class MyActionBar(ActionBar):
    def __init__(self, **kwargs):
        super(MyActionBar, self).__init__(**kwargs)

        self.register_event_type('on_button_press')
        # self.actionbar = ActionBar(pos_hint={'top': 1})

        av = ActionView()
        self.my_action_view = av
        ap = ActionPrevious(title='my action bar', with_previous=False)
        av.add_widget(ap)

        av.add_widget(ActionOverflow())
        # av.add_widget(ActionButton(text='btn0', 
        #       icon='atlas://data/images/defaulttheme/audio-volume-high'))

        ap.title = "nuudeli"

        self.devices = {}
        self.my_devices_group = ActionGroup(text='devices')

        self.ulle =  action_button = ActionButton(text='nakku')
        action_button.inside_group = True
        self.my_devices_group.add_widget(action_button)

        action_button = ActionButton(text='kuppu')
        action_button.inside_group = True
        self.my_devices_group.add_widget(action_button)

        av.add_widget(self.my_devices_group)

        b = ActionButton(text='signals')
        av.add_widget(b)
        b = ActionButton(text='memory')
        av.add_widget(b)
        b = ActionButton(text='configure')
        av.add_widget(b)
        b = ActionButton(text='program')
        av.add_widget(b)

        b = ActionButton(text='close')
        b.bind (on_release=self.my_close_pressed)
        av.add_widget(b)

        ''' 
        for i in range(1, 5):
            b = ActionButton(text='btn{}'.format(i))
            av.add_widget(b)

        ag = ActionGroup(text='group')
        for i in range(5, 8):
            ag.add_widget(ActionButton(text='Btn{}'.format(i)))
        av.add_widget(ag)
        av.remove_widget(b)            
        '''

        self.add_widget(av)
        av.use_separator = True

    def on_button_press(self, *args):
        print("button press dispatched")

    def my_close_pressed(self, instance):
        self.dispatch('on_button_press', 'close')

    def add_my_device(self, dev_path):
        self.clear_widgets()
        action_button = ActionButton(text='Make')
        self.my_devices_group.add_widget(action_button)
        self.devices[dev_path] = action_button;
        # self._trigger_layout()
        action_button.inside_group = True
        self.ulle.text = 'kaniini'
        self.my_devices_group.text = 'masiina'
        action_button.text = dev_path
        self.my_devices_group.clear_widgets()
        self.clear_widgets()

    def remove_my_device(self, dev_path):
        action_button = self.devices.get(dev_path, None)
        if action_button != None:
            self.my_devices_group.remove_widget(action_button)
            self.devices[dev_path] = None;

class MainApp(App):
    def build(self):
        self.root = MyActionBar(pos_hint={'top': 1})
        return self.root

if __name__ == '__main__':
    MainApp().run()