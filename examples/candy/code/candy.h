/**

  @file    candy.h
  @brief   Candy camera IO example.
  @author  Pekka Lehtikoski
  @version 1.0
  @date    22.4.2020

  Copyright 2020 Pekka Lehtikoski. This file is part of the iocom project and shall only be used,
  modified, and distributed under the terms of the project licensing. By continuing to use, modify,
  or distribute this file you indicate that you have read the license and understand and accept
  it fully.

****************************************************************************************************
*/
#define IOCOM_IOBOARD

#define PINS_CAMERA 0


#include "iocom.h"
#include "pinsx.h"
#include "nodeconf.h"
#include "deviceinfo.h"

struct pinsPhoto;

/* Use Gazerbeamm library to enable wifi configuration by Android phone's flash light and
   phototransistor connected to microcontroller (0 or 1). If not defined for build, check
   if we have "gazerbeam" input pin.
 */
#ifndef IOCOM_USE_GAZERBEAM
  #ifdef PINS_INPUTS_GAZERBEAM
    #define IOCOM_USE_GAZERBEAM 1
  #else
    #define IOCOM_USE_GAZERBEAM 0
  #endif
#endif

/* Blink network status as morse code if we have an IO pin named "led_morse"
 */
#ifndef IOCOM_USE_MORSE
  #ifdef PINS_OUTPUTS_LED_MORSE
    #define IOCOM_USE_MORSE 1
  #else
    #define IOCOM_USE_MORSE 0
  #endif
#endif


/* Get controller IP address from UDP multicast (0 or 1) ?.
 */
#ifndef IOCOM_USE_LIGHTHOUSE
#define IOCOM_USE_LIGHTHOUSE 1
#endif

/* Sensibility check: Allow lighthouse only for socket clients.
 */
#if (IOBOARD_CTRL_CON & IOBOARD_CTRL_IS_SOCKET)==0 || (IOBOARD_CTRL_CON & IOBOARD_CTRL_IS_SERVER)
#undef IOCOM_USE_LIGHTHOUSE
#define IOCOM_USE_LIGHTHOUSE 0
#endif

/* Include IO pin and communication configuration headers generated by "config" JSON files.
 */
#include "json_io_config.h"

/* Communication callback. Changes data received, etc.
 */
void ioboard_communication_callback(
    struct iocHandle *handle,
    os_int start_addr,
    os_int end_addr,
    os_ushort flags,
    void *context);

/* Callback from camera when a photo has been taken.
 */
void ioboard_camera_callback(
    struct pinsPhoto *photo,
    void *context);

/* Configure camera.
 */
void ioboard_configure_camera(void);

/* Turn camera on/off.
 */
void ioboard_control_camera(void);

