# parameters_to_c.py 11.6.2020/pekka
# Convert parameter JSON file to C code.
import json
import os
import sys

def start_c_files():
    global cfile, hfile, cfilepath, hfilepath
    cfile = open(cfilepath, "w")
    hfile = open(hfilepath, "w")
    cfile.write('/* This file is generated by parameters_to_c.py script, do not modify. */\n')
    hfile.write('/* This file is generated by parameters_to_c.py script, do not modify. */\n')
    path, fname = os.path.split(hfilepath)
    fname, ext = os.path.splitext(fname)
    macroname = 'IOC_' + fname.upper() + '_INCLUDED'
    hfile.write('#ifndef ' + macroname + '\n')
    hfile.write('#define ' + macroname + '\n')
    hfile.write('OSAL_C_HEADER_BEGINS\n\n')

def finish_c_files():
    global cfile, hfile
    hfile.write('\nOSAL_C_HEADER_ENDS\n')
    hfile.write('#endif\n')
    cfile.close()
    hfile.close()

def setup_group(x_groups, group_name):
    for group in x_groups:
        if group_name == group.get("name", None):
            return group["signals"]

    group = {"name" : group_name, "signals" : []} 
    x_groups.append(group)
    return group["signals"]

def append_parameter(parameter):
    global current_type;

    name = parameter.get("name", None);
    if name == None:
        print("Parameter without name");
        return

    type = parameter.get("type", None);
    if type != None:
        current_type = type

    array_n = parameter.get('array', 1);
    if array_n < 1:
        array_n = 1

    if current_type == 'str':
        ctype = 'char'
    else:
        ctype = current_type
    hfile.write('  os_' + ctype + ' ' + name)

    if array_n > 1:
        hfile.write('[' + str(array_n) + ']')

    hfile.write(';\n')

    init = parameter.get('init', None);

    if init != None:
        if array_n > 1:
            if type == 'str':
                cfile.write('"' + str(init) + '"')
            else:
                init_list = init.split(',')
                is_first = True
                cfile.write('{')
                for i in init_list:
                    if not is_first:
                        cfile.write(', ')
                    is_first = False
                    cfile.write(str(i))
                cfile.write('{')
        else:
            cfile.write(str(init))

    cfile.write(' /* ' + name + ' */')
    return name
    
def process_struct(data, struct_name, global_name):
    global current_type
    hfile.write('\ntypedef struct ' + struct_name + ' {\n')
    cfile.write(struct_name + ' ' + global_name + ' = {\n  ')

    current_type = "ushort"
    title = data.get("title", "untitled")
    groups = data.get("groups", None)
    if groups == None:
        print('"' + title + '" is empty?')
        return

    is_first = True

    parameter_list = []

    for group in groups:
        parameters = group.get("parameters", None)
        if parameters == None:
            print("Group without parameters?")
        else:
            for parameter in parameters:
                if not is_first:
                    cfile.write(',\n  ')
                is_first = False
                name = append_parameter(parameter)
                parameter_list.append((global_name, name))

    hfile.write('}\n' + struct_name + ';\n\n')
    hfile.write('extern ' + struct_name + ' ' + global_name + ';\n\n')
    cfile.write('};\n\n')

    for i in parameter_list:
        hfile.write('#define IOCP_' + i[1].upper() + ' ' +  i[0] + '.' + i[1] + '\n')
    hfile.write('\n')

def process_source_file(path):
    global cfile, hfile
    read_file = open(path, "r")
    if read_file:
        data = json.load(read_file)

        persistent = data.get("persistent", None)
        if persistent != None:
            process_struct(persistent, "iocDevicePersistentPrm", "ioc_persistent_prm")

        volatile = data.get("volatile", None)
        if volatile != None:
            process_struct(volatile, "iocDeviceVolatilePrm", "ioc_volatile_prm")
    else:
        print ("Opening file " + path + " failed")

def mymain():
    global cfilepath, hfilepath
    n = len(sys.argv)
    sourcefiles = []
    outpath = None
    expect = None
    for i in range(1, n):
        if sys.argv[i][0] == "-":
            if sys.argv[i][1] == "o":
                expect = 'o'
        else:
            if expect=='o':
                outpath = sys.argv[i]
                expect = None
            else:
                sourcefiles.append(sys.argv[i])

    if len(sourcefiles) < 1:
        print("No source files")
        exit()
        # sourcefiles.append('/coderoot/iocom/examples/candy/config/parameters/parameters.json')

    if outpath is None:
        outpath = sourcefiles[0]

    filename, file_extension = os.path.splitext(outpath)
    cfilepath = filename + '.c'
    hfilepath = filename + '.h'

    # Make sure that "intermediate" directory exists.
    dir_path, file_name =  os.path.split(outpath)
    try:
        os.makedirs(dir_path)
    except FileExistsError:
        pass

    print("Writing files " + cfilepath + " and " + hfilepath)

    start_c_files()

    for path in sourcefiles:
        process_source_file(path)

    finish_c_files()

mymain()
